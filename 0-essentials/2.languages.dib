#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"name":"csharp","languageName":"C#","aliases":["c#","C#"]},{"name":"kql","languageName":"KQL","aliases":[]},{"name":"vscode","aliases":["frontend"],"languageName":null},{"name":".NET","aliases":[],"languageName":null},{"name":"fsharp","languageName":"F#","aliases":["f#","F#"]},{"name":"html","languageName":"HTML","aliases":[]},{"name":"http","languageName":"HTTP","aliases":[]},{"name":"javascript","languageName":"JavaScript","aliases":["js"]},{"name":"mermaid","languageName":"Mermaid","aliases":[]},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"sql","languageName":"SQL","aliases":[]},{"name":"value","aliases":[],"languageName":null},{"name":"webview","aliases":[]}]}}

#!markdown

# Desirable qualities in a Programming Language

#!markdown

- It should compile to multiple targets
- It should have a REPL (Read-Eval-Print-Loop) [It should let me experiment with third party libraries in a REPL - a Notebook is just a visual REPL]
- It should come from a family of languages (e.g. ML, Lisp etc., so when you understand the syntax for one of the languages in the family, you'll understand code written in other languages of the same family)
- I should be able to write full-stack / AI / ML applications using the same language

#!markdown

#### Other desirable features

- Value equality should be the default
- Type Inference (for a statically typed language)
- Discriminated unions (a pack of cards example)

#!markdown

### Compilation targets of some of the languages

| Language | Default Target      | JS | Dart | Python | Rust | C++ (Native) |
|----------|---------------------|----|------|--------|------|-----|
| [F#](https://fsharp.org/) | .Net | [Fable](https://fable.io/) | Fable | Fable | Fable | |
| [Clojure](https://clojure.org/) | JVM | [ClojureScript](https://clojurescript.org/) | [ClojureDart](https://github.com/Tensegritics/ClojureDart) | [clj-python](https://github.com/clj-python/libpython-clj) | | [Jank (Clojure on C++)](https://jank-lang.org/) |
| [Scala](https://www.scala-lang.org/) | JVM | [Scala.js](https://www.scala-js.org/) | | | | [Scala Native](https://scala-native.org/en/stable/) |

#!markdown

### Language families

| Family | Lisp | ML | C |
|--------|------|----|---|
|  | [Clojure](https://clojure.org/) | [F#](https://fsharp.org/) | C, C++ |
| Examples | [Racket](https://racket-lang.org/)  | [OCaml](https://ocaml.org/) | Java, C# |
|  | [Scheme](https://scheme.com/tspl4/) / [Common Lisp](https://common-lisp.net/) | [ReScript](https://rescript-lang.org/) | JS |
