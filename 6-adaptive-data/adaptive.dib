#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"name":"csharp","languageName":"C#","aliases":["c#","C#"]},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"vscode","aliases":["frontend"],"languageName":null},{"name":"kql","languageName":"KQL","aliases":[]}]}}

#!markdown

# Adaptive data for F#

This library provides a simple yet powerful way to write incremental functional computations that can be connected to imperative sources on both input and output.

#!fsharp

#r "nuget: FSharp.Data.Adaptive, 1.2.13"

#!fsharp

open FSharp.Data.Adaptive

#!fsharp

type Country = 
  | India
  | UK
  | Spain

#!fsharp

let sayHello name (country: Country) =
  match country with
  | India -> $"Namaste, {name}"
  | UK -> $"Hello, {name}"
  | Spain -> $"Hola, {name}"

#!fsharp

let dName = "Daniel"
let dCountry = UK

let mName = "Manoj"
let mCountry = India

let forDaniel = sayHello dName dCountry
let forManoj = sayHello mName mCountry

#!fsharp

let adaptiveSayHello name country =
  AVal.map2 (fun n c -> sayHello n c) name country

#!fsharp

let dNameA = cval "Daniel"
let dCountryA = cval UK
let forDanielA = adaptiveSayHello dNameA dCountryA
let outoutForDaniel = AVal.force forDanielA
printfn $"check value for Daniel: {outoutForDaniel}"

let mNameA = cval "Manoj"
let mCountryA = cval India
let forManojA = adaptiveSayHello mNameA mCountryA
let outoutForManoj = AVal.force forManojA
printfn $"check value for Manoj: {outoutForManoj}"

#!fsharp

// if someone changes a value for Daniel
transact(fun () -> dCountryA.Value <- Spain)
let updatedOutoutForDaniel = AVal.force forDanielA
printfn $"check value for Daniel: {updatedOutoutForDaniel}"

#!markdown

This example feels a lot like an Excel calculation, in which *dependent cells get **updated*** whenever *changeable inputs change*. Some important differences are -

1. All 'cells' are adaptive values
2. 'Cells' are first-class values
3. Changeable 'cells' are distinguished from computed
4. In the above, each 'cell' gets named explcitly in program code, rather than using implicit naming on a sheet
5. Some glue like AVal.map2 is needed to connect cells
6. User code is responsible for making changes using transact
7. Re-calc happens on-demand as outputs are observed
