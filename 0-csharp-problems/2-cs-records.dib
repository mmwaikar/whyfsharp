#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":".NET"},{"aliases":["C#","c#"],"languageName":"C#","name":"csharp"},{"aliases":["F#","f#"],"languageName":"F#","name":"fsharp"},{"aliases":[],"languageName":"HTML","name":"html"},{"aliases":["js"],"languageName":"JavaScript","name":"javascript"},{"aliases":[],"languageName":"KQL","name":"kql"},{"aliases":[],"languageName":"Mermaid","name":"mermaid"},{"aliases":["powershell"],"languageName":"PowerShell","name":"pwsh"},{"aliases":[],"languageName":"SQL","name":"sql"},{"aliases":[],"name":"value"},{"aliases":["frontend"],"name":"vscode"},{"aliases":[],"name":"webview"}]}}

#!markdown

## So why not use Records?

#!csharp

using static System.Console;

#!csharp

public record Emp(string Name, int Age);

var e1 = new Emp("Abc", 10);
var e2 = new Emp("Abc", 10);

WriteLine($"e1: {e1}");
WriteLine($"e1 == e2: {e1 == e2}");

#!markdown

### OK, so what about this?

#!csharp

public record Person(string Name, int Age, string[] addresses);

var addresses1 = new [] { "abc", "def" };
var addresses2 = new [] { "abc", "def" };

var p1 = new Person("Abc", 10, addresses1);
var p2 = new Person("Abc", 10, addresses2);

WriteLine($"p1: {p1}, phone numbers: {String.Join(", ", p1.addresses)}");
WriteLine($"p2: {p2}, phone numbers: {String.Join(", ", p2.addresses)}");
WriteLine($"p1 == p2 (when same data for addresses): {p1 == p2}");

var diffAddresses = new [] { "def", "ghi" };
var p3 = p2 with { addresses = diffAddresses };

WriteLine();
WriteLine($"p3: {p3}, phone numbers: {String.Join(", ", p3.addresses)}");
WriteLine($"p1 == p3 (when different data for addresses): {p1 == p3}");

#!markdown

### And what about this?

#!csharp

public record Student(string Name, int Age, List<string> addresses);

List<string> addresses1 = new() { "abc", "def" };
List<string> addresses2 = new() { "abc", "def" };

var s1 = new Student("Abc", 10, addresses1);
var s2 = new Student("Abc", 10, addresses2);

WriteLine($"s1: {s1}");
WriteLine($"s1 == s2 (when same data for addresses): {s1 == s2}");

List<string> diffAddresses = new() { "def", "ghi" };
var s3 = s2 with { addresses = diffAddresses };

WriteLine();
WriteLine($"s3: {s3}");
WriteLine($"s1 == s3 (when different data for addresses): {s1 == s3}");

#!markdown

# So neither the value equality works, nor the ToString() works as expected.

## What's the solution then?

You should try using the [Language-Ext](https://github.com/louthy/language-ext) library.
