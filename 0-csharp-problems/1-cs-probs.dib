#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":".NET"},{"aliases":["C#","c#"],"languageName":"C#","name":"csharp"},{"aliases":["F#","f#"],"languageName":"F#","name":"fsharp"},{"aliases":[],"languageName":"HTML","name":"html"},{"aliases":["js"],"languageName":"JavaScript","name":"javascript"},{"aliases":[],"languageName":"KQL","name":"kql"},{"aliases":[],"languageName":"Mermaid","name":"mermaid"},{"aliases":["powershell"],"languageName":"PowerShell","name":"pwsh"},{"aliases":[],"languageName":"SQL","name":"sql"},{"aliases":[],"name":"value"},{"aliases":["frontend"],"name":"vscode"},{"aliases":[],"name":"webview"}]}}

#!markdown

# Problems with C#

#!markdown

- Older languages have no REPL (though you can use [dotnet-repl](https://github.com/jonsequitur/dotnet-repl))
- **C# (and Java) are built with wrong defaults**

#!markdown

| Wrong (C#, Java) | Right (Clojure, F#, Scala) |
|------------------|----------------------------|
| Reference Equality | Value Equality |
| Mutable collections | Immutable collections |

#!markdown

### So let's see some code in action

#!csharp

using static System.Console;

#!csharp

public class Emp 
{
    public string Name { get; set; }
    public int Age { get; set; }
}

var e1 = new Emp { Name = "Abc", Age = 10 };
var e2 = new Emp { Name = "Abc", Age = 10 };

WriteLine($"e1: {e1}");
WriteLine($"e1 == e2: {e1 == e2}");

#!markdown

- No default ToString implementation
- Can't compare 2 instances based on values

#!markdown

### Same problem with a list of values

#!csharp

List<Emp> listEmps = new() {e1, e2};
List<Emp> anotherList = new() {e1, e2};

WriteLine($"are two lists equal (==): {listEmps == anotherList}");
WriteLine($"are two lists equal (.Equals()): {listEmps.Equals(anotherList)}");

#!markdown

### And God forbid, if you have to deal with a list of values and search through them etc.

*In the below code, although e2 is same as e1, it is not found in the list*

#!csharp

var e3 = new Emp { Name = "Def", Age = 20 };
var e4 = new Emp { Name = "Ghi", Age = 30 };
List<Emp> empList = new() {e1, e3, e4};

var contains = empList.Contains(e2);
WriteLine($"contains should be True, but is: {contains}");

#!markdown

## And who remembers, IEquatable, IEquatable`<T`>? Or even wants to remember those?
